#!/bin/python3

import socket
import selectors
import os
import subprocess

from colorama import Fore, Style


SRC_DIR = "/workspaces/RMCS/rmcs_ws/install"
DST_DIR = "ssh://remote//rmcs_install"
SOCKET_PATH = "/tmp/sync-remote"

SYNC_FLAG = b"Nothing to do:"
COLORED_SYNC_FLAG = (
    f"{Fore.LIGHTGREEN_EX}{Style.BRIGHT}Nothing to do{Style.RESET_ALL}:".encode("ascii")
)


def create_process():
    command = [
        "unison",
        "-ignorearchives",
        "-auto",
        "-batch",
        "-repeat",
        "watch",
        "-times",
        SRC_DIR,
        DST_DIR,
        "-force",
        SRC_DIR,
        "-follow",
        "Name *",
    ]
    pipe_r, pipe_w = os.pipe()
    process = subprocess.Popen(
        command,
        stdout=pipe_w,
        stderr=pipe_w,
    )
    return process, pipe_r


def create_server():
    if os.path.exists(SOCKET_PATH):
        os.remove(SOCKET_PATH)

    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    server.bind(SOCKET_PATH)
    server.listen()
    server.setblocking(False)

    return server


def finish_connection(conn: socket):
    try:
        conn.sendall(b"f")
    except:
        pass
    finally:
        conn.close()


def main():
    selector = selectors.DefaultSelector()

    process, pipe_stdout = create_process()
    selector.register(pipe_stdout, selectors.EVENT_READ, data=None)

    server = create_server()
    selector.register(server, selectors.EVENT_READ, data=None)

    clients = []
    ready = False

    try:
        while True:
            events = selector.select(timeout=1)
            for key, _ in events:
                if key.fileobj == server:
                    conn, _ = server.accept()
                    if ready:
                        finish_connection(conn)
                    else:
                        clients.append(conn)
                else:
                    stdout = os.read(pipe_stdout, 1024)
                    if stdout.startswith(SYNC_FLAG):
                        ready = True
                        stdout = COLORED_SYNC_FLAG + stdout[len(SYNC_FLAG) :]
                        for conn in clients:
                            finish_connection(conn)
                        clients = []
                    else:
                        ready = False
                    os.write(1, stdout)
            if process.poll() is not None:
                break
    except KeyboardInterrupt:
        try:
            process.wait()
        except KeyboardInterrupt:
            print("SIGINT sent twice, force quitting.")
            process.kill()
    finally:
        server.close()
        selector.close()
        if os.path.exists(SOCKET_PATH):
            os.unlink(SOCKET_PATH)


if __name__ == "__main__":
    main()
